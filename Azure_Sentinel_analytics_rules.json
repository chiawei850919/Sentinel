{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/51eb0ae5-cc05-49e2-b694-c6711bb12fd9')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/51eb0ae5-cc05-49e2-b694-c6711bb12fd9')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2022-11-01-preview",
            "properties": {
                "displayName": "Authentication Attempt from New Country",
                "description": "Authentication Attempt from New CountryTest",
                "severity": "Medium",
                "enabled": false,
                "query": "workspace(\"51978007-3f40-446f-a92c-a97540c6b251\").IdentityInfo\n| where TimeGenerated >= ago(6d)\n| where AccountUPN has \"grace\" or AccountUPN has \"wayne\" \n| where Department has \"ICE223\" or Department has \"ICE222\" or Department has \"ICE220\"\n| extend\n    IPAddress =\"211.79.204.250\",\n    CreatedTime=\"2023-07-18 14:24\"\n    ,\n    TimeGeneratede =format_datetime(datetime_utc_to_local(TimeGenerated, 'Asia/Taipei'), 'yyyy-MM-dd HH:mm')\n| summarize count() by AccountUPN, IPAddress, TimeGenerated\n| extend SOAR = bag_pack(\"Account\", AccountUPN, \"IP\", IPAddress, \"CreatedTime\", TimeGenerated)\n| sort by AccountUPN desc \n",
                "queryFrequency": "P1D",
                "queryPeriod": "P14D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [],
                "techniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": {
                    "alertDynamicProperties": []
                },
                "customDetails": {
                    "SOAR": "SOAR"
                },
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "SOAR"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": null
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/b1296af6-67d6-4b53-8a6b-4ac76b48819c')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/b1296af6-67d6-4b53-8a6b-4ac76b48819c')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2022-11-01-preview",
            "properties": {
                "displayName": "TI map IP entity to SigninLogs",
                "description": "Identifies a match in SigninLogs from any IP IOC from TI",
                "severity": "Medium",
                "enabled": true,
                "query": "let dt_lookBack = 1h;\nlet ioc_lookBack = 14d;\nlet aadFunc = (tableName: string) {\n    ThreatIntelligenceIndicator\n    | where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\n    | where Active == true\n    // Picking up only IOC's that contain the entities we want\n    | where isnotempty(NetworkIP)\n        or isnotempty(EmailSourceIpAddress)\n        or isnotempty(NetworkDestinationIP)\n        or isnotempty(NetworkSourceIP)\n    // As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.\n    // Taking the first non-empty value based on potential IOC match availability\n    | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\n    | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\n    | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\n    // using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\n    | join kind=innerunique (\n        union isfuzzy=true \n            table(tableName)\n        | where TimeGenerated >= ago(dt_lookBack)\n        | extend Status = todynamic(Status), LocationDetails = todynamic(LocationDetails)\n        | extend\n            StatusCode = tostring(Status.errorCode),\n            StatusDetails = tostring(Status.additionalDetails),\n            StatusReason = tostring(Status.failureReason)\n        | extend\n            State = tostring(LocationDetails.state),\n            City = tostring(LocationDetails.city),\n            Region = tostring(LocationDetails.countryOrRegion)\n        // renaming time column so it is clear the log this came from\n        | extend SigninLogs_TimeGenerated = TimeGenerated, Type = Type\n        )\n        on $left.TI_ipEntity == $right.IPAddress\n    | where SigninLogs_TimeGenerated < ExpirationDateTime\n    | summarize SigninLogs_TimeGenerated = arg_max(SigninLogs_TimeGenerated, *) by IndicatorId, IPAddress\n    | project\n        SigninLogs_TimeGenerated,\n        Description,\n        ActivityGroupNames,\n        IndicatorId,\n        ThreatType,\n        Url,\n        ExpirationDateTime,\n        ConfidenceScore,\n        TI_ipEntity,\n        IPAddress,\n        UserPrincipalName,\n        AppDisplayName,\n        StatusCode,\n        StatusDetails,\n        StatusReason,\n        NetworkIP,\n        NetworkDestinationIP,\n        NetworkSourceIP,\n        EmailSourceIpAddress,\n        Type\n    | extend\n        timestamp = SigninLogs_TimeGenerated,\n        AccountCustomEntity = UserPrincipalName,\n        IPCustomEntity = IPAddress,\n        URLCustomEntity = Url,\n         CreatedTime =format_datetime(datetime_utc_to_local(SigninLogs_TimeGenerated, 'Asia/Taipei'), 'yyyy-MM-dd HH:mm')\n     | extend SOAR = bag_pack(\"Account\", UserPrincipalName, \"IP\", IPAddress, \"CreatedTime\", CreatedTime)\n};\nlet aadSignin = aadFunc(\"ACSI_SigninLogs\");\nlet aadNonInt = aadFunc(\"ACSI_AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "P14D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": "2023-07-27T02:00:00.000Z",
                "tactics": [
                    "Impact"
                ],
                "techniques": [],
                "alertRuleTemplateName": "f2eb15bd-8a88-4b24-9281-e133edfba315",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": {
                    "alertDynamicProperties": []
                },
                "customDetails": {
                    "SOAR": "SOAR"
                },
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "URL",
                        "fieldMappings": [
                            {
                                "identifier": "Url",
                                "columnName": "URLCustomEntity"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": "1.2.2"
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/35bdf33d-4bc5-4821-a302-8d42fc0752ba')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/35bdf33d-4bc5-4821-a302-8d42fc0752ba')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2022-11-01-preview",
            "properties": {
                "displayName": "Multiple Password Reset by user",
                "description": "This query will determine multiple password resets by user across multiple data sources. \nAccount manipulation including password reset may aid adversaries in maintaining access to credentials \nand certain permission levels within an environment.",
                "severity": "Low",
                "enabled": true,
                "query": "let PerUserThreshold = 5;\nlet TotalThreshold = 500;\nlet action = dynamic([\"change\", \"changed\", \"reset\"]);\nlet pWord = dynamic([\"password\", \"credentials\"]);\nlet PasswordResetMultiDataSource =\n    (union isfuzzy=true\n        (//Password reset events\n        //4723: An attempt was made to change an account's password\n        //4724: An attempt was made to reset an accounts password\n        workspace(\"51978007-3f40-446f-a92c-a97540c6b251\").SecurityEvent\n        | where EventID in (\"4723\", \"4724\")\n        | project TimeGenerated, Computer, AccountType, Account, Type, TargetUserName),\n        (//Password reset events\n        //4723: An attempt was made to change an account's password\n        //4724: An attempt was made to reset an accounts password\n        workspace(\"51978007-3f40-446f-a92c-a97540c6b251\").WindowsEvent\n        | where EventID in (\"4723\", \"4724\")\n        | extend SubjectUserSid = tostring(EventData.SubjectUserSid)\n        | extend TargetUserName = tostring(EventData.TargetUserName)\n        | extend Account =  strcat(tostring(EventData.SubjectDomainName), \"\\\\\", tostring(EventData.SubjectUserName))\n        | extend AccountType=case(Account endswith \"$\" or SubjectUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(SubjectUserSid), \"\", \"User\")\n        | project TimeGenerated, Computer, AccountType, Account, Type, TargetUserName),\n        (//Azure Active Directory Password reset events\n        workspace(\"51978007-3f40-446f-a92c-a97540c6b251\").AuditLogs\n        | where OperationName has_any (pWord)\n            and OperationName has_any (action)\n            and Result =~ \"success\"\n        | extend\n            AccountType = tostring(TargetResources[0].type),\n            Account = tostring(TargetResources[0].userPrincipalName), \n            TargetUserName = tolower(tostring(TargetResources[0].displayName))\n        | project TimeGenerated, AccountType, Account, Computer = \"\", Type),\n        (//OfficeActive ActiveDirectory Password reset events\n        workspace(\"51978007-3f40-446f-a92c-a97540c6b251\").OfficeActivity\n        | where OfficeWorkload == \"AzureActiveDirectory\" \n        | where (ExtendedProperties has_any (pWord) or ModifiedProperties has_any (pWord)) and (ExtendedProperties has_any (action) or ModifiedProperties has_any (action))\n        | extend AccountType = UserType, Account = OfficeObjectId \n        | project TimeGenerated, AccountType, Account, Type, Computer = \"\"),\n        (// Unix syslog password reset events\n        workspace(\"51978007-3f40-446f-a92c-a97540c6b251\").Syslog\n        | where Facility in (\"auth\", \"authpriv\")\n        | where SyslogMessage has_any (pWord) and SyslogMessage has_any (action)\n        | extend AccountType = iif(SyslogMessage contains \"root\", \"Root\", \"Non-Root\")\n        | where SyslogMessage matches regex \".*password changed for.*\"\n        | parse SyslogMessage with * \"password changed for\" Account\n        | project TimeGenerated, AccountType, Account, Computer = HostName, Type)\n    );\nlet pwrmd = PasswordResetMultiDataSource\n    | project TimeGenerated, Computer, AccountType, Account, Type, TargetUserName;\n(union isfuzzy=true  \n    (pwrmd\n    | summarize\n        StartTimeUtc = min(TimeGenerated),\n        EndTimeUtc = max(TimeGenerated),\n        Computerlist = make_set(Computer, 25),\n        AccountType = make_set(AccountType, 25),\n        Computer = arg_max(Computer, TimeGenerated),\n        TargetUserList = make_set(TargetUserName, 25),\n        TargetUserName = arg_max(TargetUserName, TimeGenerated),\n        Total=count()\n        by Account, Type\n    | where Total > PerUserThreshold\n    | extend ResetPivot = \"PerUserReset\"),  \n    (pwrmd\n    | summarize\n        StartTimeUtc = min(TimeGenerated),\n        EndTimeUtc = max(TimeGenerated),\n        ComputerList = make_set(Computer, 25),\n        AccountList = make_set(Account, 25),\n        AccountType = make_set(AccountType, 25),\n        Computer = arg_max(Computer, TimeGenerated),\n        TargetUserList = make_set(TargetUserName, 25),\n        TargetUserName = arg_max(TargetUserName, TimeGenerated),\n        Total=count()\n        by Type\n    | where Total > TotalThreshold\n    | extend ResetPivot = \"TotalUserReset\")\n)\n| extend\n    timestamp = StartTimeUtc,\n    AccountCustomEntity = Account,\n    HostCustomEntity = Computer\n| extend CreatedTime =format_datetime(datetime_utc_to_local(StartTimeUtc, 'Asia/Taipei'), 'yyyy-MM-dd HH:mm')\n| extend SOAR = bag_pack(\"Account\", AccountCustomEntity, \"Total\", Total, \"CreatedTime\", CreatedTime)\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": "2023-07-27T02:00:00.000Z",
                "tactics": [
                    "InitialAccess",
                    "CredentialAccess"
                ],
                "techniques": [
                    "T1078",
                    "T1110"
                ],
                "alertRuleTemplateName": "0b9ae89d-8cad-461c-808f-0494f70ad5c4",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": {
                    "SOAR": "SOAR"
                },
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "Host",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "HostCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "TargetUserName"
                            }
                        ]
                    },
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountList"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": "2.1.2"
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/888ce363-9d3d-4517-937d-861dce8819a8')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/888ce363-9d3d-4517-937d-861dce8819a8')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2022-11-01-preview",
            "properties": {
                "displayName": "Explicit MFA Deny",
                "description": "User explicitly denies MFA push, indicating that login was not expected and the account's password may be compromised.",
                "severity": "Medium",
                "enabled": true,
                "query": "let aadFunc = (tableName: string) {\n    table(tableName)\n    | where ResultType == 500121\n    | where Status has \"MFA Denied; user declined the authentication\" or Status has \"MFA denied; Phone App Reported Fraud\"\n    | extend Type = Type\n    | extend CreatedTime =format_datetime(datetime_utc_to_local(TimeGenerated, 'Asia/Taipei'), 'yyyy-MM-dd HH:mm')\n    | extend\n        timestamp = TimeGenerated,\n        AccountCustomEntity = UserPrincipalName,\n        IPCustomEntity = IPAddress,\n        URLCustomEntity = ClientAppUsed,\n        SOAR = bag_pack(\"Account\", UserPrincipalName, \"IP\", IPAddress, \"CreatedTime\", CreatedTime)\n};\nlet aadSignin = aadFunc(\"ACSI_SigninLogs\");\nlet aadNonInt = aadFunc(\"ACSI_AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P3D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": "2023-07-27T02:00:00.000Z",
                "tactics": [
                    "CredentialAccess"
                ],
                "techniques": [
                    "T1110"
                ],
                "alertRuleTemplateName": "a22740ec-fc1e-4c91-8de6-c29c6450ad00",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": {
                    "alertDynamicProperties": []
                },
                "customDetails": {
                    "SOAR": "SOAR"
                },
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "URL",
                        "fieldMappings": [
                            {
                                "identifier": "Url",
                                "columnName": "URLCustomEntity"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": "1.0.1"
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/edd22f2c-86a6-42f7-81ca-2bd0b5d0381e')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/edd22f2c-86a6-42f7-81ca-2bd0b5d0381e')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2022-11-01-preview",
            "properties": {
                "displayName": "Brute force attack against Azure Portal",
                "description": "Identifies evidence of brute force activity against Azure Portal by highlighting multiple authentication failures \nand by a successful authentication within a given time window. \nDefault Failure count is 10 and default Time Window is 20 minutes.\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes.",
                "severity": "Medium",
                "enabled": true,
                "query": "let timeRange = 24h;\nlet failureCountThreshold = 10;\nlet authenticationWindow = 20m;\nlet aadFunc = (tableName: string) {\n    table(tableName)\n    | where AppDisplayName has \"Azure Portal\"\n    | extend\n        DeviceDetail = todynamic(DeviceDetail),\n        //Status = todynamic(Status),\n        LocationDetails = todynamic(LocationDetails)\n    | extend\n        OS = tostring(DeviceDetail.operatingSystem),\n        Browser = tostring(DeviceDetail.browser),\n        //StatusCode = tostring(Status.errorCode),\n        //StatusDetails = tostring(Status.additionalDetails),\n        State = tostring(LocationDetails.state),\n        City = tostring(LocationDetails.city),\n        Region = tostring(LocationDetails.countryOrRegion)\n    // Split out failure versus non-failure types\n    | extend FailureOrSuccess = iff(ResultType in (\"0\", \"50125\", \"50140\", \"70043\", \"70044\"), \"Success\", \"Failure\")  \n    // sort for sessionizing - by UserPrincipalName and time of the authentication outcome\n    | sort by UserPrincipalName asc, TimeGenerated asc\n    // sessionize into failure groupings until either the account changes or there is a success\n    | extend SessionStartedUtc = row_window_session(TimeGenerated, timeRange, authenticationWindow, UserPrincipalName != prev(UserPrincipalName) or prev(FailureOrSuccess) == \"Success\")\n    // bin outcomes based on authenticationWindow\n    | summarize FailureOrSuccessCount = count()\n        by\n        FailureOrSuccess,\n        UserId,\n        UserDisplayName,\n        AppDisplayName,\n        IPAddress,\n        Browser,\n        OS,\n        State,\n        City,\n        Region,\n        Type,\n        CorrelationId,\n        bin(TimeGenerated, authenticationWindow),\n        ResultType,\n        UserPrincipalName,\n        SessionStartedUtc\n    // count the failures in each session\n    | summarize\n        FailureCountBeforeSuccess=sumif(FailureOrSuccessCount, FailureOrSuccess == \"Failure\"),\n        StartTime=min(TimeGenerated),\n        EndTime=max(TimeGenerated),\n        makelist(FailureOrSuccess),\n        IPAddress = make_set(IPAddress),\n        make_set(Browser),\n        make_set(City),\n        make_set(State),\n        make_set(Region),\n        make_set(ResultType)\n        by\n        SessionStartedUtc,\n        UserPrincipalName,\n        CorrelationId,\n        AppDisplayName,\n        UserId,\n        Type\n    // the session must not start with a success, and must end with one\n    | where array_index_of(list_FailureOrSuccess, \"Success\") != 0\n    | where array_index_of(list_FailureOrSuccess, \"Success\") == array_length(list_FailureOrSuccess) - 1\n    | project-away SessionStartedUtc, list_FailureOrSuccess\n    // where the number of failures before the success is above the threshold \n    | where FailureCountBeforeSuccess >= failureCountThreshold \n    // expand out ip for entity assignment\n    | mv-expand IPAddress\n    | extend IPAddress = tostring(IPAddress)\n    | extend SOAR = bag_pack(\"Account\", UserPrincipalName, \"IP\", IPAddress, \"CreatedTime\", StartTime)\n    | extend\n        timestamp = StartTime,\n        AccountCustomEntity = UserPrincipalName,\n        IPCustomEntity = IPAddress \n};\nlet aadSignin = aadFunc(\"ACSI_SigninLogs\");\nlet aadNonInt = aadFunc(\"ACSI_AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": "2023-07-27T02:00:00.000Z",
                "tactics": [
                    "CredentialAccess"
                ],
                "techniques": [
                    "T1110"
                ],
                "alertRuleTemplateName": "28b42356-45af-40a6-a0b4-a554cdfd5d8a",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": {
                    "SOAR": "SOAR"
                },
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": "2.1.0"
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/8d53305c-9438-41f9-b85b-a8e2c3d2abdb')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/8d53305c-9438-41f9-b85b-a8e2c3d2abdb')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "NRT",
            "apiVersion": "2022-11-01-preview",
            "properties": {
                "displayName": "NRT MFA Rejected by VIP User",
                "description": "Identifies occurrences where a user has rejected an MFA prompt. This could be an indicator that a threat actor has compromised the username and password of this user account and is using it to try and log into the account.\nRef : https://docs.microsoft.com/azure/active-directory/fundamentals/security-operations-user-accounts#monitoring-for-failed-unusual-sign-ins",
                "severity": "High",
                "enabled": true,
                "query": "let VIP = (_GetWatchlist('VIPUser')| project SearchKey);\nACSI_SigninLogs\n| where ResultType == 50074 or ResultType == 500121\n| where UserPrincipalName in (VIP)\n| extend CreatedTime =format_datetime(datetime_utc_to_local(TimeGenerated, 'Asia/Taipei'), 'yyyy-MM-dd HH:mm')\n| extend\n    additionalDetails_ = tostring(Status.additionalDetails),\n    SOAR = bag_pack(\"Account\", UserPrincipalName, \"IP\", IPAddress, \"CreatedTime\", CreatedTime)\n| where additionalDetails_ =~ \"MFA denied; user declined the authentication\"\n\n",
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "InitialAccess"
                ],
                "techniques": [
                    "T1078"
                ],
                "alertRuleTemplateName": "3617d76d-b15e-4c6f-985e-a1dac73c592d",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": {
                    "SOAR": "SOAR"
                },
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "UserPrincipalName"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPAddress"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": "1.0.1"
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/0add0498-0b29-4f49-9d6d-e5c4722cbb15')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/0add0498-0b29-4f49-9d6d-e5c4722cbb15')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "NRT",
            "apiVersion": "2022-11-01-preview",
            "properties": {
                "displayName": "NRT Creation of expensive computes in Azure",
                "description": "Identifies the creation of large size/expensive VMs (GPU or with large no of virtual CPUs) in Azure.\nAdversary may create new or update existing virtual machines sizes to evade defenses \nor use it for cryptomining purposes.\nFor Windows/Linux Vm Sizes - https://docs.microsoft.com/azure/virtual-machines/windows/sizes \nAzure VM Naming Conventions - https://docs.microsoft.com/azure/virtual-machines/vm-naming-conventions",
                "severity": "Medium",
                "enabled": true,
                "query": "let tokens = dynamic([\"416\", \"208\", \"128\", \"120\", \"96\", \"80\", \"72\", \"64\", \"48\", \"44\", \"40\", \"g5\", \"gs5\", \"g4\", \"gs4\", \"nc12\", \"nc24\", \"nv12\"]);\nlet operationList = dynamic([\"microsoft.compute/virtualmachines/write\", \"microsoft.resources/deployments/write\"]);\nworkspace(\"51978007-3f40-446f-a92c-a97540c6b251\").AzureActivity\n| where tolower(OperationNameValue) in (operationList)\n| where ActivityStatusValue == \"Accepted\" \n| where isnotempty(Properties)\n| extend vmSize = tolower(tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).hardwareProfile)).vmSize))\n| where isnotempty(vmSize)\n| where vmSize has_any (tokens) \n| extend ComputerName = tostring(parse_json(tostring(parse_json(tostring(parse_json(tostring(parse_json(Properties).responseBody)).properties)).osProfile)).computerName)\n| extend clientIpAddress = tostring(parse_json(HTTPRequest).clientIpAddress)\n| project\n    TimeGenerated,\n    OperationNameValue,\n    ActivityStatusValue,\n    Caller,\n    CallerIpAddress,\n    ComputerName,\n    vmSize\n| extend\n    timestamp = TimeGenerated,\n    AccountCustomEntity = Caller,\n    IPCustomEntity = CallerIpAddress,\n    CreatedTime =format_datetime(datetime_utc_to_local(TimeGenerated, 'Asia/Taipei'), 'yyyy-MM-dd HH:mm')\n| extend SOAR = bag_pack(\"Account\",AccountCustomEntity, \"IP\",CallerIpAddress,\"CreatedTime\", CreatedTime)\n\n",
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "DefenseEvasion"
                ],
                "techniques": [
                    "T1578"
                ],
                "alertRuleTemplateName": "56fe0db0-6779-46fa-b3c5-006082a53064",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": {
                    "SOAR": "SOAR"
                },
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPCustomEntity"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": "2.0.0"
            }
        },
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/BuiltInFusion')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/BuiltInFusion')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Fusion",
            "apiVersion": "2022-11-01-preview",
            "properties": {
                "enabled": true,
                "alertRuleTemplateName": "f71aba3d-28fb-450b-b192-4e76a83015c8",
                "sourceSettings": [
                    {
                        "enabled": true,
                        "sourceName": "Anomalies",
                        "sourceSubTypes": null
                    },
                    {
                        "enabled": true,
                        "sourceName": "Alert providers",
                        "sourceSubTypes": [
                            {
                                "sourceSubTypeDisplayName": "Azure Active Directory Identity Protection",
                                "sourceSubTypeName": "Azure Active Directory Identity Protection",
                                "enabled": true,
                                "severityFilters": {
                                    "isSupported": true,
                                    "filters": [
                                        {
                                            "severity": "High",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Medium",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Low",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Informational",
                                            "enabled": true
                                        }
                                    ]
                                }
                            },
                            {
                                "sourceSubTypeDisplayName": "Microsoft 365 Defender",
                                "sourceSubTypeName": "Microsoft 365 Defender",
                                "enabled": true,
                                "severityFilters": {
                                    "isSupported": true,
                                    "filters": [
                                        {
                                            "severity": "High",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Medium",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Low",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Informational",
                                            "enabled": true
                                        }
                                    ]
                                }
                            },
                            {
                                "sourceSubTypeDisplayName": "Microsoft Cloud App Security",
                                "sourceSubTypeName": "Microsoft Cloud App Security",
                                "enabled": true,
                                "severityFilters": {
                                    "isSupported": true,
                                    "filters": [
                                        {
                                            "severity": "High",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Medium",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Low",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Informational",
                                            "enabled": true
                                        }
                                    ]
                                }
                            },
                            {
                                "sourceSubTypeDisplayName": "Microsoft Defender for Cloud",
                                "sourceSubTypeName": "Azure Defender",
                                "enabled": true,
                                "severityFilters": {
                                    "isSupported": true,
                                    "filters": [
                                        {
                                            "severity": "High",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Medium",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Low",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Informational",
                                            "enabled": true
                                        }
                                    ]
                                }
                            },
                            {
                                "sourceSubTypeDisplayName": "Microsoft Defender for Endpoint",
                                "sourceSubTypeName": "Microsoft Defender for Endpoint",
                                "enabled": true,
                                "severityFilters": {
                                    "isSupported": true,
                                    "filters": [
                                        {
                                            "severity": "High",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Medium",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Low",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Informational",
                                            "enabled": true
                                        }
                                    ]
                                }
                            },
                            {
                                "sourceSubTypeDisplayName": "Microsoft Defender for Identity",
                                "sourceSubTypeName": "Microsoft Defender for Identity",
                                "enabled": true,
                                "severityFilters": {
                                    "isSupported": true,
                                    "filters": [
                                        {
                                            "severity": "High",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Medium",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Low",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Informational",
                                            "enabled": true
                                        }
                                    ]
                                }
                            },
                            {
                                "sourceSubTypeDisplayName": "Microsoft Defender for IoT",
                                "sourceSubTypeName": "Azure Defender for IoT",
                                "enabled": true,
                                "severityFilters": {
                                    "isSupported": true,
                                    "filters": [
                                        {
                                            "severity": "High",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Medium",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Low",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Informational",
                                            "enabled": true
                                        }
                                    ]
                                }
                            },
                            {
                                "sourceSubTypeDisplayName": "Microsoft Defender for Office 365",
                                "sourceSubTypeName": "Microsoft Defender for Office 365",
                                "enabled": true,
                                "severityFilters": {
                                    "isSupported": true,
                                    "filters": [
                                        {
                                            "severity": "High",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Medium",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Low",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Informational",
                                            "enabled": true
                                        }
                                    ]
                                }
                            },
                            {
                                "sourceSubTypeDisplayName": "Azure Sentinel scheduled analytics rules",
                                "sourceSubTypeName": "Azure Sentinel scheduled analytics rules",
                                "enabled": true,
                                "severityFilters": {
                                    "isSupported": true,
                                    "filters": [
                                        {
                                            "severity": "High",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Medium",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Low",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Informational",
                                            "enabled": true
                                        }
                                    ]
                                }
                            },
                            {
                                "sourceSubTypeDisplayName": "Azure Sentinel NRT analytic rules",
                                "sourceSubTypeName": "Azure Sentinel NRT analytic rules",
                                "enabled": true,
                                "severityFilters": {
                                    "isSupported": true,
                                    "filters": [
                                        {
                                            "severity": "High",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Medium",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Low",
                                            "enabled": true
                                        },
                                        {
                                            "severity": "Informational",
                                            "enabled": true
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                ],
                "scenarioExclusionPatterns": []
            }
        }
    ]
}