{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {},
    "functions": [],
    "variables": {},
    "resources": [{
        "type": "Microsoft.SecurityInsights/alertRules",
        "apiVersion": "2022-11-01-preview",
        "name": "wayne-git-test",
        "kind": "Scheduled",
        "properties": {
                "displayName": "Multiple Password Reset by user",
                "description": "This query will determine multiple password resets by user across multiple data sources. \nAccount manipulation including password reset may aid adversaries in maintaining access to credentials \nand certain permission levels within an environment.",
                "severity": "Low",
                "enabled": true,
                "query": "let PerUserThreshold = 5;\nlet TotalThreshold = 500;\nlet action = dynamic([\"change\", \"changed\", \"reset\"]);\nlet pWord = dynamic([\"password\", \"credentials\"]);\nlet PasswordResetMultiDataSource =\n    (union isfuzzy=true\n        (//Password reset events\n        //4723: An attempt was made to change an account's password\n        //4724: An attempt was made to reset an accounts password\n        workspace(\"51978007-3f40-446f-a92c-a97540c6b251\").SecurityEvent\n        | where EventID in (\"4723\", \"4724\")\n        | project TimeGenerated, Computer, AccountType, Account, Type, TargetUserName),\n        (//Password reset events\n        //4723: An attempt was made to change an account's password\n        //4724: An attempt was made to reset an accounts password\n        workspace(\"51978007-3f40-446f-a92c-a97540c6b251\").WindowsEvent\n        | where EventID in (\"4723\", \"4724\")\n        | extend SubjectUserSid = tostring(EventData.SubjectUserSid)\n        | extend TargetUserName = tostring(EventData.TargetUserName)\n        | extend Account =  strcat(tostring(EventData.SubjectDomainName), \"\\\\\", tostring(EventData.SubjectUserName))\n        | extend AccountType=case(Account endswith \"$\" or SubjectUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(SubjectUserSid), \"\", \"User\")\n        | project TimeGenerated, Computer, AccountType, Account, Type, TargetUserName),\n        (//Azure Active Directory Password reset events\n        workspace(\"51978007-3f40-446f-a92c-a97540c6b251\").AuditLogs\n        | where OperationName has_any (pWord)\n            and OperationName has_any (action)\n            and Result =~ \"success\"\n        | extend\n            AccountType = tostring(TargetResources[0].type),\n            Account = tostring(TargetResources[0].userPrincipalName), \n            TargetUserName = tolower(tostring(TargetResources[0].displayName))\n        | project TimeGenerated, AccountType, Account, Computer = \"\", Type),\n        (//OfficeActive ActiveDirectory Password reset events\n        workspace(\"51978007-3f40-446f-a92c-a97540c6b251\").OfficeActivity\n        | where OfficeWorkload == \"AzureActiveDirectory\" \n        | where (ExtendedProperties has_any (pWord) or ModifiedProperties has_any (pWord)) and (ExtendedProperties has_any (action) or ModifiedProperties has_any (action))\n        | extend AccountType = UserType, Account = OfficeObjectId \n        | project TimeGenerated, AccountType, Account, Type, Computer = \"\"),\n        (// Unix syslog password reset events\n        workspace(\"51978007-3f40-446f-a92c-a97540c6b251\").Syslog\n        | where Facility in (\"auth\", \"authpriv\")\n        | where SyslogMessage has_any (pWord) and SyslogMessage has_any (action)\n        | extend AccountType = iif(SyslogMessage contains \"root\", \"Root\", \"Non-Root\")\n        | where SyslogMessage matches regex \".*password changed for.*\"\n        | parse SyslogMessage with * \"password changed for\" Account\n        | project TimeGenerated, AccountType, Account, Computer = HostName, Type)\n    );\nlet pwrmd = PasswordResetMultiDataSource\n    | project TimeGenerated, Computer, AccountType, Account, Type, TargetUserName;\n(union isfuzzy=true  \n    (pwrmd\n    | summarize\n        StartTimeUtc = min(TimeGenerated),\n        EndTimeUtc = max(TimeGenerated),\n        Computerlist = make_set(Computer, 25),\n        AccountType = make_set(AccountType, 25),\n        Computer = arg_max(Computer, TimeGenerated),\n        TargetUserList = make_set(TargetUserName, 25),\n        TargetUserName = arg_max(TargetUserName, TimeGenerated),\n        Total=count()\n        by Account, Type\n    | where Total > PerUserThreshold\n    | extend ResetPivot = \"PerUserReset\"),  \n    (pwrmd\n    | summarize\n        StartTimeUtc = min(TimeGenerated),\n        EndTimeUtc = max(TimeGenerated),\n        ComputerList = make_set(Computer, 25),\n        AccountList = make_set(Account, 25),\n        AccountType = make_set(AccountType, 25),\n        Computer = arg_max(Computer, TimeGenerated),\n        TargetUserList = make_set(TargetUserName, 25),\n        TargetUserName = arg_max(TargetUserName, TimeGenerated),\n        Total=count()\n        by Type\n    | where Total > TotalThreshold\n    | extend ResetPivot = \"TotalUserReset\")\n)\n| extend\n    timestamp = StartTimeUtc,\n    AccountCustomEntity = Account,\n    HostCustomEntity = Computer\n| extend CreatedTime =format_datetime(datetime_utc_to_local(StartTimeUtc, 'Asia/Taipei'), 'yyyy-MM-dd HH:mm')\n| extend SOAR = bag_pack(\"Account\", AccountCustomEntity, \"Total\", Total, \"CreatedTime\", CreatedTime)\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": "2023-07-27T02:00:00.000Z",
                "tactics": [
                    "InitialAccess",
                    "CredentialAccess"
                ],
                "techniques": [
                    "T1078",
                    "T1110"
                ],
                "alertRuleTemplateName": "0b9ae89d-8cad-461c-808f-0494f70ad5c4",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": {
                    "SOAR": "SOAR"
                },
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "Host",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "HostCustomEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "TargetUserName"
                            }
                        ]
                    },
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "AccountList"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": "2.1.2"
            } 
  // For remaining properties, see alertRules objects
}],
    "outputs": {}
}